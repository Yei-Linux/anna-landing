generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  phone               String?
  name                String?
  fullName            String?
  documentNumber      String?
  genderId            String?
  email               String?               @unique
  password            String?
  isInactive          Boolean?
  lastInteraction     Int?
  hasAnyCronicDesease Boolean?
  cronicDesease       Int?
  Diagnosis           diagnosis[]
  BookingAppointments bookingAppointments[]
  clinic_histories    clinic_histories?     @relation(fields: [clinic_historiesId], references: [id])
  carePlusPlanPrice   Int?

  emailVerified DateTime? @map("email_verified")
  image         String?

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  accounts           Account[]
  sessions           Session[]
  clinic_historiesId String?   @db.ObjectId

  @@map("users")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @map("user_id") @db.ObjectId
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @map("user_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model diagnosis {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  userId           String  @db.ObjectId
  title            String
  description      String?
  creationTime     String
  diagnosisDetails Json
  User             User    @relation(fields: [userId], references: [id])
}

model clinic_histories {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @unique @db.ObjectId
  civilStatus String
  occupation  String
  background  Json
  User        User[]
}

model doctors {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  email          String  @unique
  password       String
  fullName       String
  documentNumber String?
}

model bookingAppointments {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  turn          Int?
  day           String?
  diseaseOption Int?
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?  @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("booking_appointments")
}
